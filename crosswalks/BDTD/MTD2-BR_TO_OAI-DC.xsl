<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013r2sp2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns:ns0="http://oai.ibict.br/mtd2-br/" 
xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
xmlns:fn="http://www.w3.org/2005/xpath-functions" 
exclude-result-prefixes="ns0 vmf xs fn">
	
	<xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyzàáâãäåæçèéêëìíîïðñòóôõö÷øùüúþÿ'" />	
	<xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÜÚÞß'" />	

	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Orientador'">
				<xsl:value-of select="'advisor'"/>
			</xsl:when>
			<xsl:when test="$input='Co-Orientador'">
				<xsl:value-of select="'advisor-co'"/>
			</xsl:when>
			<xsl:when test="$input='Presidente da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:when test="$input='Vice-Presidente da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:when test="$input='Membro da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'others'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="vmf:vmf2_inputtoresult">
			<xsl:param name="input" select="()"/>
			<xsl:if test="contains($input,'PT')">
				<xsl:value-of select="'por'"/>
			</xsl:if>
			<xsl:if test="contains($input,'EN')">
				<xsl:value-of select="'eng'"/>
			</xsl:if>
			<xsl:if test="contains($input,'ES')">
				<xsl:value-of select="'spa'"/>
			</xsl:if>
			<xsl:if test="contains($input,'FR')">
				<xsl:value-of select="'fra'"/>
			</xsl:if>
			<xsl:if test="contains($input,'IT')">
				<xsl:value-of select="'ita'"/>
			</xsl:if>
			<xsl:if test="contains($input,'DE')">
				<xsl:value-of select="'deu'"/>
			</xsl:if>
			<xsl:if test="contains($input,'GER')">
				<xsl:value-of select="'deu'"/>
			</xsl:if>
			<xsl:if test="contains($input,'JA')">
				<xsl:value-of select="'jpn'"/>
			</xsl:if>
	</xsl:template>
	
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Doutor'">
				<xsl:value-of select="'doctoralThesis'"/>
			</xsl:when>
			<xsl:when test="$input='Mestre'">
				<xsl:value-of select="'masterThesis'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="vmf:vmf4_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pt'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='por'">
				<xsl:value-of select="true()"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="vmf:vmf6_inputtoresult">
		<xsl:param name="input1" select="()"/>
		<xsl:choose>
			<xsl:when test="$input1='eng'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input1='spa'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input1='fra'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input1='deu'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input1='ita'">
				<xsl:value-of select="true()"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="vmf:vmf8_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pdf'">
				<xsl:value-of select="'application/pdf'"/>
			</xsl:when>
			<xsl:when test="$input='PDF'">
				<xsl:value-of select="'application/pdf'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
				
	<xsl:template match="/">

		<xsl:variable name="var1_mtdbr" as="node()?" select="ns0:mtd2br"/>
		
		
		<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">

		<!--  AUTOR -->
		
		
		<xsl:if test="$var1_mtdbr/ns0:Autor/ns0:Nome">
			<dc:creator>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Autor/ns0:Nome)"/>
			</dc:creator>
			<xsl:if test="$var1_mtdbr/ns0:Autor/ns0:Lattes">
				<dc:creator>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Autor/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:creator>
			</xsl:if>
		</xsl:if>

		<!--  ORIENTADOR -->
		
		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Orientador'][position()=1]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Orientador'][position()=1]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Orientador'][position()=1]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Orientador'][position()=1]/ns0:Lattes)"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>
		
		<!--  CO-ORIENTADORES -->
	
		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=1]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=1]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=1]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=1]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>
		
		
		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=2]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=2]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=2]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Co-Orientador'][position()=2]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>

		<!--  MEMBROS DA BANCA -->

		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=1]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=1]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=1]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=1]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>
				

		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=2]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=2]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=2]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=2]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=3]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=3]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=3]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=3]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=4]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=4]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=4]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=4]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
			
		</xsl:if>	
		
		<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=5]/ns0:Nome">
			<dc:contributor>
				<xsl:value-of select="fn:normalize-space($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=5]/ns0:Nome)"/>
			</dc:contributor>
			<xsl:if test="$var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=5]/ns0:Lattes">
				<dc:contributor>
					<xsl:value-of select="fn:normalize-space(fn:replace($var1_mtdbr/ns0:Contribuidor[@Papel='Membro da Banca'][position()=5]/ns0:Lattes,'visualizacv.jsp','visualizacv.do'))"/>
				</dc:contributor>
			</xsl:if>
				
		</xsl:if>
		


		<xsl:for-each select="$var1_mtdbr">
			<dc:date>
				<xsl:sequence select="xs:string(fn:string(ns0:DataDefesa))"/>
			</dc:date>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr/ns0:Arquivo">
			<dc:identifier>
				<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:URL)))"/>
			</dc:identifier>
		</xsl:for-each>
		
		<xsl:if test="not(fn:exists($var1_mtdbr/ns0:Arquivo))">
			<dc:identifier>
				<xsl:text>SEM_ARQUIVO</xsl:text>
			</dc:identifier>
		</xsl:if>
		
		<xsl:for-each select="$var1_mtdbr/ns0:Resumo">
			<!-- <xsl:variable name="var3_Idioma" as="node()?" select="@Idioma"/> -->
			<dc:description>
			<xsl:sequence select="fn:string(.)"/>
			<!--
				<xsl:if test="fn:exists($var3_Idioma)">
					<xsl:variable name="var4_resultof_vmf__inputtoresult" as="xs:string?">
						<xsl:call-template name="vmf:vmf2_inputtoresult">
								<xsl:with-param name="input" select="translate(fn:string($var3_Idioma), $smallcase, $uppercase)"/>
						</xsl:call-template>
					</xsl:variable>
						<xsl:attribute name="lang" namespace="" select="$var4_resultof_vmf__inputtoresult"/>
				</xsl:if>
				<xsl:sequence select="fn:concat($var4_resultof_vmf__inputtoresult,': ',fn:string(.))"/> -->
			</dc:description>
		</xsl:for-each> 
		<!--
		<xsl:for-each select="$var1_mtdbr/ns0:AgenciaFomento">
			<xsl:variable name="var5_cur" as="node()" select="."/>
			<xsl:for-each select="ns0:Sigla">
				<mtd3-br:descriptionSponsorship>
					<xsl:sequence select="fn:concat(fn:concat(fn:string(.), ' - '), fn:string($var5_cur/ns0:Nome))"/>
				</mtd3-br:descriptionSponsorship>
			</xsl:for-each>
		</xsl:for-each>
		-->
		<xsl:for-each select="$var1_mtdbr">
			<dc:publisher>
				<xsl:sequence select="fn:string(ns0:InstituicaoDefesa/ns0:Nome)"/>
			</dc:publisher>
		</xsl:for-each>
		<!--
		<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Pais">
			<mtd3-br:publisherCountry>
				<xsl:sequence select="fn:string(.)"/>
			</mtd3-br:publisherCountry>
		</xsl:for-each>
		
		<xsl:for-each select="$var1_mtdbr">
			<mtd3-br:publisherDepartament>
				<xsl:sequence select="fn:string(ns0:InstituicaoDefesa/ns0:Nome)"/>
			</mtd3-br:publisherDepartament>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Programa">
			<mtd3-br:publisherProgram>
				<xsl:sequence select="fn:string(ns0:Nome)"/>
			</mtd3-br:publisherProgram>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Sigla">
			<mtd3-br:publisherInitials>
				<xsl:sequence select="fn:string(.)"/>
			</mtd3-br:publisherInitials>
		</xsl:for-each>
		-->
		<xsl:variable name="var8_resultof_filter" as="node()?">
			<xsl:for-each select="$var1_mtdbr">
				<xsl:variable name="var6_resultof_vmf__inputtoresult" as="xs:string?">
					<xsl:call-template name="vmf:vmf3_inputtoresult">
						<xsl:with-param name="input" select="fn:string(ns0:Grau)" as="xs:string"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="var7_resultof_exists" as="xs:boolean" select="fn:exists($var6_resultof_vmf__inputtoresult)"/>
				<xsl:if test="$var7_resultof_exists">
					<xsl:sequence select="."/>
				</xsl:if>
			</xsl:for-each>
		</xsl:variable>
		<xsl:for-each select="$var8_resultof_filter">
			<dc:type>
				<xsl:call-template name="vmf:vmf3_inputtoresult">
					<xsl:with-param name="input" select="fn:string(ns0:Grau)" as="xs:string"/>
				</xsl:call-template>
			</dc:type>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr">
			<xsl:variable name="var11_resultof_filter" as="node()*">
				<xsl:for-each select="ns0:Titulo[fn:exists(@Idioma)]">
					<xsl:variable name="var9_resultof_vmf__inputtoresult" as="xs:boolean?">
						<xsl:call-template name="vmf:vmf4_inputtoresult">
							<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var10_resultof_exists" as="xs:boolean" select="fn:exists($var9_resultof_vmf__inputtoresult)"/>
					<xsl:if test="$var10_resultof_exists">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="var13_resultof_filter" as="node()*">
				<xsl:for-each select="$var11_resultof_filter">
					<xsl:variable name="var12_resultof_first" as="xs:boolean">
						<xsl:call-template name="vmf:vmf4_inputtoresult">
							<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:if test="$var12_resultof_first">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var13_resultof_filter">
				<dc:title>
					<xsl:sequence select="fn:string(.)"/>
				</dc:title>
			</xsl:for-each>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr">
			<xsl:variable name="var16_resultof_filter" as="node()*">
				<xsl:for-each select="ns0:Titulo[fn:exists(@Idioma)]">
					<xsl:variable name="var14_resultof_vmf__inputtoresult" as="xs:string?">
						<xsl:call-template name="vmf:vmf2_inputtoresult">
							<xsl:with-param name="input" select="translate(fn:string(@Idioma), $smallcase, $uppercase)"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var15_resultof_exists" as="xs:boolean" select="fn:exists($var14_resultof_vmf__inputtoresult)"/>
					<xsl:if test="$var15_resultof_exists">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="var19_resultof_filter" as="node()*">
				<xsl:for-each select="$var16_resultof_filter">
					<xsl:variable name="var17_resultof_vmf__inputtoresult" as="xs:boolean?">
						<xsl:call-template name="vmf:vmf6_inputtoresult">
							<xsl:with-param name="input1" as="xs:string">
								<xsl:call-template name="vmf:vmf2_inputtoresult">
									<xsl:with-param name="input" select="translate(fn:string(@Idioma), $smallcase, $uppercase)"/>
								</xsl:call-template>
							</xsl:with-param>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var18_resultof_exists" as="xs:boolean" select="fn:exists($var17_resultof_vmf__inputtoresult)"/>
					<xsl:if test="$var18_resultof_exists">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="var21_resultof_filter" as="node()*">
				<xsl:for-each select="$var19_resultof_filter">
					<xsl:variable name="var20_resultof_first" as="xs:boolean">
						<xsl:call-template name="vmf:vmf6_inputtoresult">
							<xsl:with-param name="input1" as="xs:string">
								<xsl:call-template name="vmf:vmf2_inputtoresult">
									<xsl:with-param name="input" select="translate(fn:string(@Idioma), $smallcase, $uppercase)"/>
								</xsl:call-template>
							</xsl:with-param>
						</xsl:call-template>
					</xsl:variable>
					<xsl:if test="$var20_resultof_first">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<!--
			<xsl:for-each select="$var21_resultof_filter">
				<dc:title>
					<xsl:attribute name="lang" namespace="">
						<xsl:call-template name="vmf:vmf2_inputtoresult">
							<xsl:with-param name="input" select="translate(fn:string(@Idioma), $smallcase, $uppercase)"/>
						</xsl:call-template>
					</xsl:attribute>
					<xsl:sequence select="fn:string(.)"/>
				</dc:title>
			</xsl:for-each> -->
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr">
			<dc:language>
				<xsl:call-template name="vmf:vmf2_inputtoresult">
					<xsl:with-param name="input" select="translate(fn:string(ns0:Idioma), $smallcase, $uppercase)"/>
				</xsl:call-template>
			</dc:language>
		</xsl:for-each>
		
		<!--<xsl:for-each select="$var1_mtdbr/ns0:Direitos"> -->
			<dc:rights>
				<xsl:text>openAccess</xsl:text>
			<!--<xsl:sequence select="fn:string(.)"/> -->
			</dc:rights>
		<!-- </xsl:for-each>-->
		
		<xsl:for-each select="$var1_mtdbr/ns0:Assunto">
			<xsl:variable name="var23_Idioma" as="node()?" select="@Idioma"/>
			<dc:subject>
				<xsl:sequence select="fn:string(.)"/>
			</dc:subject>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Programa/ns0:Area">
			<dc:subject>
				<xsl:sequence select="fn:string(.)"/>
			</dc:subject>
		</xsl:for-each>
		<xsl:for-each select="$var1_mtdbr">
			<xsl:variable name="var27_resultof_filter" as="node()*">
				<xsl:for-each select="ns0:Arquivo[fn:exists(ns0:URL/@Formato)]">
					<xsl:variable name="var25_resultof_vmf__inputtoresult" as="xs:string?">
						<xsl:call-template name="vmf:vmf8_inputtoresult">
							<xsl:with-param name="input" select="fn:string(ns0:URL/@Formato)" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var26_resultof_exists" as="xs:boolean" select="fn:exists($var25_resultof_vmf__inputtoresult)"/>
					<xsl:if test="$var26_resultof_exists">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var27_resultof_filter">
				<dc:format>
					<xsl:call-template name="vmf:vmf8_inputtoresult">
						<xsl:with-param name="input" select="fn:string(ns0:URL/@Formato)" as="xs:string"/>
					</xsl:call-template>
				</dc:format>
			</xsl:for-each>
		</xsl:for-each>
		</oai_dc:dc>
	</xsl:template>
</xsl:stylesheet>
