<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013r2sp2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://oai.ibict.br/mtd2-br/" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 vmf xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Orientador'">
				<xsl:value-of select="'advisor'"/>
			</xsl:when>
			<xsl:when test="$input='Co-Orientador'">
				<xsl:value-of select="'advisor-co'"/>
			</xsl:when>
			<xsl:when test="$input='Presidente da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:when test="$input='Vice-Presidente da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:when test="$input='Membro da Banca'">
				<xsl:value-of select="'referees'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'others'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='Pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='PT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pt_BR'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='en'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='En'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='EN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='eN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='Es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='ES'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='eS'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='Fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='FR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='fR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='it'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='It'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='IT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='iT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='de'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='De'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='DE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='dE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='ger'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='Doutor'">
				<xsl:value-of select="'doctoralThesis'"/>
			</xsl:when>
			<xsl:when test="$input='Mestre'">
				<xsl:value-of select="'masterThesis'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf4_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pt'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='por'">
				<xsl:value-of select="true()"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf5_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='Pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='PT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pt_BR'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='en'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='En'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='EN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='eN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='Es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='ES'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='eS'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='Fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='FR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='fR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='it'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='It'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='IT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='iT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='de'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='De'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='DE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='dE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='ger'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf6_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='eng'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='spa'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='fra'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='deu'">
				<xsl:value-of select="true()"/>
			</xsl:when>
			<xsl:when test="$input='ita'">
				<xsl:value-of select="true()"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf7_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='Pt'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='PT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pT'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='pt_BR'">
				<xsl:value-of select="'por'"/>
			</xsl:when>
			<xsl:when test="$input='en'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='En'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='EN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='eN'">
				<xsl:value-of select="'eng'"/>
			</xsl:when>
			<xsl:when test="$input='es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='Es'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='ES'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='eS'">
				<xsl:value-of select="'spa'"/>
			</xsl:when>
			<xsl:when test="$input='fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='Fr'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='FR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='fR'">
				<xsl:value-of select="'fra'"/>
			</xsl:when>
			<xsl:when test="$input='it'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='It'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='IT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='iT'">
				<xsl:value-of select="'ita'"/>
			</xsl:when>
			<xsl:when test="$input='de'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='De'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='DE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='dE'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
			<xsl:when test="$input='ger'">
				<xsl:value-of select="'deu'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf8_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='pdf'">
				<xsl:value-of select="'application/pdf'"/>
			</xsl:when>
			<xsl:when test="$input='PDF'">
				<xsl:value-of select="'application/pdf'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1_mtdbr" as="node()?" select="ns0:mtd2br"/>
		<mtd3br xmlns="http://oai.ibict.br/mtd2-br/">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://oai.ibict.br/mtd2-br/ C:/Users/diegomacedo/Documents/IBICT/NovoPadraoMetadados/MTD3-BR/Novomtd3-br.xsd'"/>
			<xsl:for-each select="$var1_mtdbr/ns0:Contribuidor">
				<xsl:variable name="var2_Papel" as="node()?" select="@Papel"/>
				<contributor>
					<xsl:if test="fn:exists($var2_Papel)">
						<xsl:attribute name="role" namespace="">
							<xsl:call-template name="vmf:vmf1_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var2_Papel)" as="xs:string"/>
							</xsl:call-template>
						</xsl:attribute>
					</xsl:if>
					<xsl:sequence select="fn:string(ns0:Nome)"/>
				</contributor>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<dateAccessioned>
					<xsl:sequence select="xs:string(xs:date(xs:dateTime(fn:string(ns0:Controle/ns0:DataAtualizacao))))"/>
				</dateAccessioned>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<dateAvailable>
					<xsl:sequence select="xs:string(xs:date(fn:string(ns0:DataDefesa)))"/>
				</dateAvailable>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<dateIssued>
					<xsl:sequence select="xs:string(xs:date(fn:string(ns0:DataDefesa)))"/>
				</dateIssued>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:Arquivo">
				<identifierUri>
					<xsl:sequence select="xs:string(xs:anyURI(fn:string(ns0:URL)))"/>
				</identifierUri>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:Resumo">
				<xsl:variable name="var3_Idioma" as="node()?" select="@Idioma"/>
				<descriptionAbstract>
					<xsl:if test="fn:exists($var3_Idioma)">
						<xsl:variable name="var4_resultof_vmf__inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf2_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var3_Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:if test="fn:exists($var4_resultof_vmf__inputtoresult)">
							<xsl:attribute name="lang" namespace="" select="$var4_resultof_vmf__inputtoresult"/>
						</xsl:if>
					</xsl:if>
					<xsl:sequence select="fn:string(.)"/>
				</descriptionAbstract>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:AgenciaFomento">
				<xsl:variable name="var5_cur" as="node()" select="."/>
				<xsl:for-each select="ns0:Sigla">
					<descriptionSponsorship>
						<xsl:sequence select="fn:concat(fn:concat(fn:string(.), ' - '), fn:string($var5_cur/ns0:Nome))"/>
					</descriptionSponsorship>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<publisher>
					<xsl:sequence select="fn:string(ns0:InstituicaoDefesa/ns0:Nome)"/>
				</publisher>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Pais">
				<publisherCountry>
					<xsl:sequence select="fn:string(.)"/>
				</publisherCountry>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<publisherDepartament>
					<xsl:sequence select="fn:string(ns0:InstituicaoDefesa/ns0:Nome)"/>
				</publisherDepartament>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Programa">
				<publisherProgram>
					<xsl:sequence select="fn:string(ns0:Nome)"/>
				</publisherProgram>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Sigla">
				<publisherInitials>
					<xsl:sequence select="fn:string(.)"/>
				</publisherInitials>
			</xsl:for-each>
			<xsl:variable name="var8_resultof_filter" as="node()?">
				<xsl:for-each select="$var1_mtdbr">
					<xsl:variable name="var6_resultof_vmf__inputtoresult" as="xs:string?">
						<xsl:call-template name="vmf:vmf3_inputtoresult">
							<xsl:with-param name="input" select="fn:string(ns0:Grau)" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var7_resultof_exists" as="xs:boolean" select="fn:exists($var6_resultof_vmf__inputtoresult)"/>
					<xsl:if test="$var7_resultof_exists">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var8_resultof_filter">
				<type>
					<xsl:call-template name="vmf:vmf3_inputtoresult">
						<xsl:with-param name="input" select="fn:string(ns0:Grau)" as="xs:string"/>
					</xsl:call-template>
				</type>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<xsl:variable name="var11_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:Titulo[fn:exists(@Idioma)]">
						<xsl:variable name="var9_resultof_vmf__inputtoresult" as="xs:boolean?">
							<xsl:call-template name="vmf:vmf4_inputtoresult">
								<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var10_resultof_exists" as="xs:boolean" select="fn:exists($var9_resultof_vmf__inputtoresult)"/>
						<xsl:if test="$var10_resultof_exists">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var13_resultof_filter" as="node()*">
					<xsl:for-each select="$var11_resultof_filter">
						<xsl:variable name="var12_resultof_first" as="xs:boolean">
							<xsl:call-template name="vmf:vmf4_inputtoresult">
								<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:if test="$var12_resultof_first">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var13_resultof_filter">
					<title>
						<xsl:sequence select="fn:string(.)"/>
					</title>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<xsl:variable name="var16_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:Titulo[fn:exists(@Idioma)]">
						<xsl:variable name="var14_resultof_vmf__inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf5_inputtoresult">
								<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var15_resultof_exists" as="xs:boolean" select="fn:exists($var14_resultof_vmf__inputtoresult)"/>
						<xsl:if test="$var15_resultof_exists">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var19_resultof_filter" as="node()*">
					<xsl:for-each select="$var16_resultof_filter">
						<xsl:variable name="var17_resultof_vmf__inputtoresult" as="xs:boolean?">
							<xsl:call-template name="vmf:vmf6_inputtoresult">
								<xsl:with-param name="input" as="xs:string">
									<xsl:call-template name="vmf:vmf5_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
									</xsl:call-template>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var18_resultof_exists" as="xs:boolean" select="fn:exists($var17_resultof_vmf__inputtoresult)"/>
						<xsl:if test="$var18_resultof_exists">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var21_resultof_filter" as="node()*">
					<xsl:for-each select="$var19_resultof_filter">
						<xsl:variable name="var20_resultof_first" as="xs:boolean">
							<xsl:call-template name="vmf:vmf6_inputtoresult">
								<xsl:with-param name="input" as="xs:string">
									<xsl:call-template name="vmf:vmf5_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
									</xsl:call-template>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:if test="$var20_resultof_first">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var21_resultof_filter">
					<titleAlternative>
						<xsl:attribute name="lang" namespace="">
							<xsl:call-template name="vmf:vmf5_inputtoresult">
								<xsl:with-param name="input" select="fn:string(@Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:attribute>
						<xsl:sequence select="fn:string(.)"/>
					</titleAlternative>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<language>
					<xsl:sequence select="fn:string(ns0:Idioma)"/>
				</language>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:Direitos">
				<rights>
					<xsl:sequence select="fn:string(.)"/>
				</rights>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:Assunto">
				<xsl:variable name="var22_Esquema" as="node()?" select="@Esquema"/>
				<xsl:variable name="var23_Idioma" as="node()?" select="@Idioma"/>
				<subject>
					<xsl:if test="fn:exists($var23_Idioma)">
						<xsl:variable name="var24_resultof_vmf__inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf7_inputtoresult">
								<xsl:with-param name="input" select="fn:string($var23_Idioma)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:if test="fn:exists($var24_resultof_vmf__inputtoresult)">
							<xsl:attribute name="lang" namespace="" select="$var24_resultof_vmf__inputtoresult"/>
						</xsl:if>
					</xsl:if>
					<xsl:if test="fn:exists($var22_Esquema)">
						<xsl:attribute name="Esquema" namespace="" select="fn:string($var22_Esquema)"/>
					</xsl:if>
					<xsl:sequence select="fn:string(.)"/>
				</subject>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr/ns0:InstituicaoDefesa/ns0:Programa/ns0:Area">
				<subjectCnpq>
					<xsl:sequence select="fn:string(.)"/>
				</subjectCnpq>
			</xsl:for-each>
			<xsl:for-each select="$var1_mtdbr">
				<xsl:variable name="var27_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:Arquivo[fn:exists(ns0:URL/@Formato)]">
						<xsl:variable name="var25_resultof_vmf__inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf8_inputtoresult">
								<xsl:with-param name="input" select="fn:string(ns0:URL/@Formato)" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:variable name="var26_resultof_exists" as="xs:boolean" select="fn:exists($var25_resultof_vmf__inputtoresult)"/>
						<xsl:if test="$var26_resultof_exists">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var27_resultof_filter">
					<format>
						<xsl:call-template name="vmf:vmf8_inputtoresult">
							<xsl:with-param name="input" select="fn:string(ns0:URL/@Formato)" as="xs:string"/>
						</xsl:call-template>
					</format>
				</xsl:for-each>
			</xsl:for-each>
		</mtd3br>
	</xsl:template>
</xsl:stylesheet>
